public abstract class com/arkivanov/essenty/backhandler/BackCallback {
	public static final field Companion Lcom/arkivanov/essenty/backhandler/BackCallback$Companion;
	public static final field PRIORITY_DEFAULT I
	public fun <init> ()V
	public synthetic fun <init> (Z)V
	public fun <init> (ZI)V
	public synthetic fun <init> (ZIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addEnabledChangedListener (Lkotlin/jvm/functions/Function1;)V
	public final fun getPriority ()I
	public final fun isEnabled ()Z
	public abstract fun onBack ()V
	public final fun removeEnabledChangedListener (Lkotlin/jvm/functions/Function1;)V
	public final fun setEnabled (Z)V
	public final fun setPriority (I)V
}

public final class com/arkivanov/essenty/backhandler/BackCallback$Companion {
}

public final class com/arkivanov/essenty/backhandler/BackCallbackKt {
	public static final fun BackCallback (ZILkotlin/jvm/functions/Function0;)Lcom/arkivanov/essenty/backhandler/BackCallback;
	public static final synthetic fun BackCallback (ZLkotlin/jvm/functions/Function0;)Lcom/arkivanov/essenty/backhandler/BackCallback;
	public static synthetic fun BackCallback$default (ZILkotlin/jvm/functions/Function0;ILjava/lang/Object;)Lcom/arkivanov/essenty/backhandler/BackCallback;
}

public abstract interface class com/arkivanov/essenty/backhandler/BackDispatcher : com/arkivanov/essenty/backhandler/BackHandler {
	public abstract fun back ()Z
	public abstract fun isEnabled ()Z
}

public final class com/arkivanov/essenty/backhandler/BackDispatcherKt {
	public static final fun BackDispatcher ()Lcom/arkivanov/essenty/backhandler/BackDispatcher;
}

public abstract interface class com/arkivanov/essenty/backhandler/BackHandler {
	public abstract fun register (Lcom/arkivanov/essenty/backhandler/BackCallback;)V
	public abstract fun unregister (Lcom/arkivanov/essenty/backhandler/BackCallback;)V
}

public abstract interface class com/arkivanov/essenty/backhandler/BackHandlerOwner {
	public abstract fun getBackHandler ()Lcom/arkivanov/essenty/backhandler/BackHandler;
}

